package main

import (
	"context"
	"golang-server/ent"
	"golang-server/internal/router"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
	"go.uber.org/zap"

	_ "github.com/mattn/go-sqlite3"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println(".env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–º—ñ–Ω–Ω—ñ")
	}

	client, err := ent.Open("sqlite3", "file:ent?mode=memory&cache=shared&_fk=1")
	if err != nil {
		log.Fatalf("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ –ë–î: %v", err)
	}

	defer client.Close()

	if err := client.Schema.Create(context.Background()); err != nil {
		log.Fatalf("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ö–µ–º—É: %v", err)
	}

	app := fiber.New()

	logger, err := zap.NewProduction()
	if err != nil {
		log.Fatalf("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–≥–µ—Ä: %v", err)
	}
	defer logger.Sync()

	router.RegisterRoutes(app, client, logger)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8081"
	}

	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	log.Fatal(app.Listen(":" + port))
}
